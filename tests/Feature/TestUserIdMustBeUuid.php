<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Str;
use Tests\TestCase;

class TestUserIdMustBeUuid extends TestCase
{
    use RefreshDatabase;

    /**
     * This test check that the UUID is a string.
     *
     * @return void
     */
    public function test_user_id_must_be_uuid(): void
    {
        $user = User::factory(1)->create();

        $uuid = $user->value('id');

        $this->assertNotNull($uuid);
        $this->assertIsString($uuid);
    }

    /**
     * If User is created as object (new User) and then saved by doing $user->save() is it possible to assign to him a UUID.
     * UUID is not autogenerated.
     * @return void
     */
    public function test_user_id_non_autogenerated():void
    {
         $user = new User();

          $user->id = Str::uuid()->toString();
          $user->name = "James Doe";
          $user->email = fake()->email;
          $user->password = 'password';
          $user->save();

          $this->assertIsString($user->id);

    }

    /**
     * This test check that, after a User was created is it possible to find him by using his UUID.
     * Use the DB operation User::find($uuid)
     * @return void
     */
    public function test_user_can_be_retrieved_with_uuid():void
    {
          $createUser = User::factory(1)->create();

          $uuid = $createUser->value('id');

          $user = User::find($uuid);

          $this->assertNotNull($user);
    }

}


